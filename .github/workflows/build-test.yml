name: build-test
on:
  push

jobs:
  build-test:
    name: Build & Test (${{ matrix.build_type }} mode) on ${{ matrix.base.os }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Debug, Release ]
        base:
          - {
              os: windows-latest,
              cc: cl.exe,
              extra-flags: '',
              cache_dir: 'C:\Users\runneradmin\AppData\Roaming/ccache'
          }
        include:
          - build_type: Debug
            base: {
              os: ubuntu-latest,
              cc: g++-11,
              extra-flags: '-fno-omit-frame-pointer -fsanitize=address,undefined'
            }
          - build_type: Release
            base: {
              os: ubuntu-latest,
              cc: g++-11,
              extra-flags: ''
            }
          - build_type: Release
            base: {
              os: ubuntu-20.04,
              cc: g++-9,
              extra-flags: ''
            }

    env:
      build_folder_location: build
    runs-on: ${{ matrix.base.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Prepare useful stamps
        id: stamps
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y_%m_%d_%H_%M_%S" UTC)
          message("  set-output name=time::${current_date}")
          message("::set-output name=time::${current_date}")

      - name: Install Dependencies (Ubuntu)
        if: startsWith(matrix.base.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.base.cc }} ninja-build ccache libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
          ${{ matrix.base.cc }} --version && cmake --version && ninja --version && ccache --version

      - name: Install Dependencies (Windows)
        if: startsWith(matrix.base.os, 'windows')
        run: |
          pip install ninja
          choco install -y ccache
          ccache --version

      - name: Configure MSVC console (Windows)
        if: startsWith(matrix.base.os, 'windows') && contains(matrix.base.cc, 'exe')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Cache CCache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.base.cache_dir || '/home/runner/.ccache' }}
          key: ${{ matrix.base.os }}-ccache-${{ matrix.build_type }}-${{ matrix.base.cc }}-time-${{ steps.stamps.outputs.time }}
          restore-keys: |
            ${{ matrix.base.os }}-ccache-${{ matrix.build_type }}-${{ matrix.base.cc }}-time-

      - name: Configure CCache limit
        run: |
          ccache -M 750M
          ccache -s

      - name: Make build folder
        run: mkdir -p ${{ env.build_folder_location }}

      - name: Setup build
        run: >
          cmake -S . -B ${{ env.build_folder_location }} -G Ninja
          -DCMAKE_CXX_COMPILER="${{ matrix.base.cc }}"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_FLAGS="${{ matrix.base.extra-flags }}"
          -DBUILD_GUI="${{ matrix.build_type == 'Release' && 'ON' || 'OFF' }}"
          -DDISABLE_ZI_DEBUG=ON

      - name: Build
        timeout-minutes: 30
        run: cmake --build ${{ env.build_folder_location }}

      - name: Post-build ccache
        run: ccache -s

      - name: Run tests
        timeout-minutes: 15
        run: |
          cd ${{ env.build_folder_location }}
          ctest --verbose

      - name: Upload Artifacts
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v2
        with:
          name: Elevated build with ${{ matrix.base.cc }}
          path: |
            build/gui/elevated.exe
            build/gui/elevated
          retention-days: 14
          if-no-files-found: error
